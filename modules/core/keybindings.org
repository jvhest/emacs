#+DESCRIPTION: Modules/Core/Keybindings.org
#+STARTUP: showeverything
#+auto_tangle: nil

#+begin_src elisp
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;
;; KEYBINDINGS.ORG
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
#+end_src


** Variables

#+begin_src elisp
(defvar my-leader-key "SPC"
  "The default leader key.")

(defvar my-leader-secondary-key "C-SPC"
  "The secondary leader key.")

(defvar my-major-leader-key ","
  "The default major mode leader key.")

(defvar my-major-leader-secondary-key "M-,"
  "The secondary major mode leader key")
#+end_src

** Evil-mode

#+begin_src elisp
(use-package evil
  :hook (after-init . evil-mode)
  :preface
  (defun my/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-current-buffer))
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dired-mode 'emacs)
  (evil-set-undo-system 'undo-redo)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-ex-define-cmd "q" #'kill-current-buffer)
  (evil-ex-define-cmd "wq" #'my/save-and-kill-this-buffer)
  (define-key evil-normal-state-map (kbd "C-r") nil)
  (define-key evil-motion-state-map (kbd ";") nil)
  (define-key evil-motion-state-map (kbd ",") nil)
  (evil-mode 1))
#+end_src

** Evil-collection

A collective effort to create keybindings for various packages that work with
Evil, probably the best thing since Evil.

#+begin_src elisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Evil-lion

Ever wanted to align a long bunch of variables at their equal signs? Look no
further, because that is exactly what this does.

#+begin_src elisp
(use-package evil-lion
  :commands evil-lion-mode
  :config (evil-lion-mode))
#+end_src

** Evil-Nerd-Commenter

Quickly comment out a single line or a region. It's really neat.

#+begin_src elisp
(use-package evil-nerd-commenter
  :bind (("M-/" . evilnc-comment-or-uncomment-lines)
	       ("C-M-/" . evilnc-copy-and-comment-lines)))
#+end_src

** Evil-surround

Incredibly handy package, if you want to change what surrounds a text.

-- change surround:
- press cs"' inside "Hello World"                 -> 'Hello World'
- press cs'<q> inside 'Hello World'              -> <q>Hello World</q>
- press cst" inside <q>Hello World</q>     -> "Hello World"  (t for tag)
-- delete surround:
- press ds" inside "Hello World"                  -> Hello World
-- add new surround:
- press ysiw] inside `Hello` of [Hello] World    -> [Hello] World
- press ysiw[ inside `Hello` of [ Hello ] World  -> [Hello] World
- press yss[ wrap entire line in brackets

#+begin_src elisp
(use-package evil-surround
  :commands global-evil-surround-mode
  :init (global-evil-surround-mode 1))
#+end_src

** General

#+begin_src elisp
(use-package general
  :after evil
  :config
  (progn
    (general-override-mode)
    (general-evil-setup)

    (general-create-definer my-leader
      :states '(normal insert emacs)
      :prefix my-leader-key
      :non-normal-prefix my-leader-secondary-key)

    (general-create-definer my-major-leader
      :states '(normal insert emacs)
      :prefix my-major-leader-key
      :non-normal-prefix my-major-leader-secondary-key)

  ;; "v" (cons "Version Control" 'vc-prefix-map)
#+end_src

*** Main menu

Default `which-key' prefixes. All the main menus in one place.

#+begin_src elisp
(my-leader
  "SPC" '(consult-mode-command :wk "Consult M-x")
  "." '(find-file :wk "Find file")
  "a" '(:ignore t :wk "Applications")
  "b" '(:ignore t :wk "Buffers")
  "c" '(:ignore t :wk "Emacs config")
  "e" '(:ignore t :wk "Eshell/evaluate")
  "f" '(:ignore t :wk "Files")
  "g" '(:ignore t :wk "Goto")
  ;; "h" -> general-nmap SPC h : Help
  "K" '(helpful-at-point :wk "Helpful at Point")
  "m" '(:ignore t :wk "Org")
  ;; "n" -> general-nmap SPC n : Narrow
  ;; "r" -> general-nmap SPC r : Register
  "s" '(:ignore t :wk "Search")
  "S" '(:ignore t :wk "Spelling")
  "t" '(:ignore t :wk "Toggle")
  "u" '(:ignore t :wk "Utils")
  "v" '(:ignore t :wk "Version Control")
  "w" '(:ignore t :wk "Windows"))
#+end_src

*** Applications

#+begin_src elisp
(my-leader
  "a g" '(magit-status :wk "Magit"))
#+end_src

*** Buffers

#+begin_src elisp
(my-leader
  "b b" '(consult-buffer :wk "Switch buffer")
  "b i" '(ibuffer :wk "Ibuffer")
  "b k" '(kill-current-buffer :wk "Kill this buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer-quick :wk "Reload buffer")
  "b x" '(previous-buffer :wk "Open scratch buffer"))
#+end_src

*** Config

#+begin_src elisp
(my-leader
  "c e" '((lambda () (interactive)
            (find-file "~/.config/emacs/emacs.org")) :wk "Edit emacs config")
  "c r" '((lambda () (interactive)
            (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
  "c t" '(tangle-and-compile :wk "Tangle emacs and compile"))

#+end_src

*** Evaluate

#+begin_src elisp
(my-leader
  "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
  "e d" '(eval-defun :wk "Evaluate defun containing or after point")
  "e e" '(eval-expression :wk "Evaluate and elisp expression")
  "e h" '(counsel-esh-history :which-key "Eshell history")
  "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
  "e r" '(eval-region :wk "Evaluate elisp in region")
  "e s" '(eshell :which-key "Eshell"))
#+end_src

*** Files

#+begin_src elisp
(my-leader
  "f f" '(consult-buffer :wk "Open file")
  "b i" '(ibuffer :wk "Ibuffer")
  "b k" '(kill-current-buffer :wk "Kill this buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer-quick :wk "Reload buffer")
  "b x" '(previous-buffer :wk "Open scratch buffer"))
#+end_src

*** Goto

#+begin_src elisp
(my-leader
  "g e" '(consult-compile-error :wk "Compile errors [M-g e]")
  "g f" '(consult-flycheck :wk "Flycheck errors [M-g f]")
  "g g" '(consult-goto-line :wk "Goto linenumber [M-g l]")
  "g o" '(consult-outline :wk "Org headings [M-g o]")
  "g m" '(consult-mark :wk "Mark [M-g m]")
  "g k" '(consult-global-mark :wk "Global mark [M-g k]")
  "g i" '(consult-imenu :wk "Imenu [M-g i]")
  "g I" '(consult-imenu-multi :wk "Imenu multi [M-g I]"))
#+end_src

*** Help

Hook in existing keymap: `C-h'

#+begin_src elisp
(general-nmap "SPC h" (general-simulate-key "C-h" :which-key "...Help"))
#+end_src

*** Org mode

#+begin_src elisp
(my-leader
  "m d" '(org-demote-subtree :wk "Demote subtree")
  "m p" '(org-promote-subtree :wk "Promote subtree")
  "m a" '(org-agenda :wk "Org agenda")
  "m e" '(org-export-dispatch :wk "Org export dispatch")
  "m i" '(org-toggle-item :wk "Org toggle item")
  ;; "m t" '(org-todo :wk "Org todo")
  "m B" '(org-babel-tangle :wk "Org babel tangle")
  "m T" '(org-todo-list :wk "Org todo list")

  "m t" '(org-table-hydra/body :wk "Create org-table")

  "m d" '(:ignore t :wk "Date/deadline"))
  ;; "m d t" '(org-time-stamp :wk "Org time stamp"))
#+end_src

*** Narrow

Hook in existing keymap: `C-x n'

#+begin_src elisp
(general-nmap "SPC n" (general-simulate-key "C-x n" :which-key "...Narrow"))
#+end_src

*** Registers

Hook in existing keymap: `C-x r'

#+begin_src elisp
(general-nmap "SPC r" (general-simulate-key "C-x r" :which-key "...Registers"))
#+end_src

*** Search

#+begin_src elisp
(my-leader
  "s a" '(consult-org-agenda :wk "Agenda [M-s M-a]")
  "s g" '(consult-grep :wk "Grep [M-s g]")
  "s r" '(consult-ripgrep :wk "Ripgrep [M-s r]")
  "s f" '(consult-find :wk "Filenames [M-s d]")
  "s l" '(consult-line :wk "Isearch-buffer [M-s l]")
  "s L" '(consult-line-multi :wk "Isearch-buffer multi [M-s L]")
  "s d" '(consult-dir :wk "Directory [C-x F]")
  "s h" '(consult-history :wk "History [C-c h]")
  "s i" '(consult-isearch-history :wk "Isearch history [M-s e]"))
#+end_src

*** Toggle

#+begin_src elisp
(my-leader
  "t e" '(eshell-toggle :wk "Toggle eshell")
  "t h" '(toggle-hydra/body :wk "Toggle Hydra")
  "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
  "t t" '(visual-line-mode :wk "Toggle truncated lines")
  "t v" '(vterm-toggle :wk "Toggle vterm"))
#+end_src

*** Utils

#+begin_src elisp
(my-leader
  "u c" '(world-clock :wk "World clock")
  "u s" '(font-hydra/body :wk "Scale Text"))
#+end_src

*** Windows

#+begin_src elisp
(my-leader
  ;; Window splits
  "w c" '(evil-window-delete :wk "Close window")
  "w o" '(delete-other-windows :wk "Close other windows")
  "w n" '(evil-window-new :wk "New window")
  "w s" '(evil-window-split :wk "Horizontal split window")
  "w v" '(evil-window-vsplit :wk "Vertical split window")
  ;; Window resize
  "w >" '(window-hydra/body :wk "Resize window")
  ;; Window motions
  "w h" '(evil-window-left :wk "Window left")
  "w j" '(evil-window-down :wk "Window down")
  "w k" '(evil-window-up :wk "Window up")
  "w l" '(evil-window-right :wk "Window right")
  "w r" '(evil-window-rotate_downwards :wk "Window rotate Down")
  "w u" '(evil-window-rotate_upwards :wk "Window rotate Up")
  "w w" '(evil-window-next :wk "Next window"))))
#+end_src

