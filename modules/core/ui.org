#+DESCRIPTION: Modules/Core/Ui.org
#+STARTUP: showeverything
#+auto_tangle: nil

#+begin_src elisp
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;
;; UI.ORG
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
#+end_src


** TABLE OF CONTENT  :TOC@2:
  - [[#variables][Variables]]
  - [[#settings][Settings]]
  - [[#fonts][Fonts]]
  - [[#icons][Icons]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#hydra-interface][Hydra interface]]
  - [[#hide-mode-line][Hide-Mode-Line]]
  - [[#hl-line][Hl-Line]]
  - [[#hl-todo][HL-TODO]]
  - [[#paren][Paren]]
  - [[#helpful][Helpful]]
  - [[#which-key][Which-Key]]
  - [[#projects][Projects]]

** Variables

#+begin_src elisp
(defvar my/frame-transparency 90
  "Frame transparency.")

(defvar my/display-line-numbers-enable
  '(prog-mode-hook conf-mode-hook) "Modes with line-numbers.")
#+end_src

** Settings

#+begin_src elisp
(use-package emacs
  :hook
  (text-mode . variable-pitch-mode)

  :custom
  ;; better scrolling experience
  (scroll-margin 8)
  (fast-but-imprecise-scrolling t)  ;; Make scrolling less stuttered
  (scroll-conservatively 101)       ;; > 100
  (scroll-preserve-screen-position t)
  (auto-window-vscroll nil)

  :config
  ;; line-numbers
  (dolist (mode my/display-line-numbers-enable)
    (add-hook mode 'display-line-numbers-mode))
  (setq-default display-line-numbers-width 3    ;; Enough space for big files
                display-line-numbers-widen t)   ;; Enable dynamic sizing of line number width

  ;; general ui settings
  (global-prettify-symbols-mode t)   ;; Enables us to use ligatures in Emacs.

  ;; frame settings
  ;; activate transparency on startup
  (set-frame-parameter nil 'alpha
                       `(,my/frame-transparency
                         ,my/frame-transparency))
  (setq frame-title-format '("%b")
        frame-resize-pixelwise t
        frame-inhibit-implied-resize t)

  (setq ring-bell-function #'ignore
        visible-bell nil
        use-short-answers t        ;; Use "y" and "n" answers
        auto-window-vscroll nil)   ;; Make scrolling less stuttered

  (blink-cursor-mode -1)
  (tooltip-mode -1))
#+end_src

** Fonts

#+begin_src elisp
(set-face-attribute 'default nil
                    :family "JetBrainsMono Nerd Font"
                    :height 130
                    :weight 'semi-light)

(set-face-attribute 'fixed-pitch nil
                    :family "JetBrainsMono Nerd Font"
                    :height 130
                    :weight 'semi-light)

(set-face-attribute 'variable-pitch nil
                    :family "JetBrainsMono Nerd Font"
                    :height 135
                    :weight 'regular)

(set-face-attribute 'mode-line nil
                    :family "SpaceMono Nerd Font"
                    :height 130
                    :weight 'semi-light)
#+end_src

** Icons

#+begin_src elisp
(use-package all-the-icons-dired)
#+end_src

** Theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function.

#+begin_src elisp
(setq custom-safe-themes t)

(setq doom-theme nil)

(require-theme 'modus-themes)
(setq modus-themes-custom-auto-reload nil
      ;; modus-themes-to-toggle '(modus-vivendi-deuteranopia
      ;;                          modus-operandi-deuteranopia)
      modus-themes-to-toggle '(modus-vivendi-tinted
                               modus-operandi-tinted)
      modus-themes-mixed-fonts t
      modus-themes-variable-pitch-ui t
      modus-themes-italic-constructs t
      modus-themes-bold-constructs t
      modus-themes-completions
      '((matches . (extrabold intense))
	      (selection . (extrabold intense))
	      (popup . (extrabold intense)))
      modus-themes-prompts '(extrabold)
      modus-themes-headings
      '((agenda-structure . (fixed-pitch light 2.2))
	      (agenda-date . (fixed-pitch regular 1.3))
	      (t . (regular 1.15)))
      modus-themes-fringes 'subtle
      modus-themes-tabs-accented t
      modus-themes-paren-match '(bold intense)
      modus-themes-org-blocks 'tinted-background
      modus-themes-scale-headings t
      modus-themes-region '(bg-only))

(setq modus-themes-common-palette-overrides
      '((bg-mode-line-active bg-lavender)
	      (bg-mode-line-inactive bg-dim)
	      (border-mode-line-inactive bg-inactive)
	      (fringe subtle)
	      (bg-completion gray)
	      (bg-paren-match bg-yellow-intense)))

(setq modus-themes-headings
      '((1 . (extrabold 1.35))
        (2 . (bold 1.28))
        (3 . (bold 1.22))
        (4 . (bold 1.17))
        (5 . (bold 1.14))
        (t . (semibold 1.1))))

(load-theme (car modus-themes-to-toggle) t)

(define-key global-map (kbd "<f5>") #'modus-themes-toggle)
#+end_src

** Modeline

#+begin_src elisp
(use-package doom-modeline
  ;; Start up the modeline after initialization is finished
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 30)
  (doom-modeline-bar-width 6)
  (doom-modeline-buffer-encoding t)
  (doom-modeline-lsp t)
  (doom-modeline-icon nil)
  (doom-modeline-minor-modes nil)
  (doom-modeline-buffer-file-name-style 'relative-to-project))
#+end_src

** Hydra interface

#+begin_src elisp
(use-package posframe)

(use-package hydra
  :hook (emacs-lisp-mode . hydra-add-imenu)
  :init
  (setq hydra-hint-display-type 'posframe)

  (with-eval-after-load 'posframe
    (defun hydra-set-posframe-show-params ()
      "Set hydra-posframe style."
      (setq hydra-posframe-show-params
            `( :left-fringe 8
               :right-fringe 8
               :internal-border-width 2
               :background-color ,(face-background 'tooltip nil t)
               :foreground-color ,(face-foreground 'tooltip nil t)
               :lines-truncate t
               :poshandler posframe-poshandler-frame-bottom-center)))
    (hydra-set-posframe-show-params)
    (add-hook 'after-load-theme-hook #'hydra-set-posframe-show-params t)))

(use-package pretty-hydra)
#+end_src

** Hide-Mode-Line

#+begin_src elisp
(use-package hide-mode-line
  :hook ((shell-mode . hide-mode-line-mode)))
#+end_src

** Hl-Line

#+begin_src elisp
(use-package hl-line
  :straight (:type built-in)
  :config
  (defvar global-hi-line-sticky-flag nil)
  (global-hl-line-mode -1))
#+end_src

** HL-TODO

#+begin_src elisp
(use-package hl-todo
  :init (global-hl-todo-mode))
#+end_src

** Paren

#+begin_src elisp
(use-package paren
  :straight (:type built-in)
  :commands (show-paren-mode)
  :hook ((prog-mode . show-paren-mode)
         (org-src-mode . show-paren-mode))
  :config
  ;; (show-paren-mode 1)
  (setq show-paren-highlight-openparen t        ;; Always show the matching parenthesis.
        show-paren-delay 0
        show-paren-when-point-inside-paren t))  ;; Show parenthesis when inside a block.
#+end_src

** Helpful

#+begin_src elisp
(use-package helpful
  :bind
  (([remap describe-command] . helpful-command)
   ([remap describe-function] . helpful-callable)  ; help functions & macros
   ([remap describe-key] . helpful-key)
   ([remap describe-symbol] . helpful-symbol)
   ([remap describe-variable] . helpful-variable)
   ("C-h F" . helpful-function)                    ; help functions
   ("C-h K" . describe-keymap)
   :map helpful-mode-map
   ([remap revert-buffer] . helpful-update)))
#+end_src

** Which-Key

#+begin_src elisp
(use-package which-key
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-separator " â†’ " )
  (setq which-key-unicode-correction 3)
  (setq which-key-prefix-prefix "... ")
  (setq which-key-max-display-columns 3)
  (setq which-key-idle-delay 1.0)
  (setq which-key-idle-secondary-delay 0.25)
  (setq which-key-add-column-padding 5)
  (setq which-key-max-description-length 40)
  (setq which-key-sort-order 'which-key-key-order-alpha))
#+end_src

** Projects

#+begin_src elisp
(use-package project
  :straight (:type built-in)
  :demand t
  :custom ('project-list-file (no-littering-expand-var-file-name "projects")))
#+end_src




